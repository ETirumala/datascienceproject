Python Token:
    it is basic component of the source code. A character cateagorize in to four class of token they are
        Keyword
        Identifiers
        LIterals
        Operators
    
    KEYWORDS:
    python keywords are special reserved words.
    Each Keywords have a special meaning and a specific operation
        True     Class       finally    is       return
        False    continue    for        lambda   try
        None     def         from       nonlocal while
        and      del         global     not      with
        as       elif        if         or       yield
        assert   else        import     pass
        break    except      in         raise
         
    Rules for keywords:
        we cannot use a keyword as variable name, function name or any other identifier.
        In python, Keywords are CASE SENSITIVE.
        All the Keywords except TRUE FALSE NONE are in lowercase and they must be written as it is.
        
    Example for Keywords
        
        To Get the list of keywords of latest version by using below code
        
            import keyword
            print (keyword.kwlist)
            
            output:
            ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else',                'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise',                'return', 'try', 'while', 'with', 'yield']
            
        Description of Keywords
        
            TRUE AND FALSE:
            
                This keywords are truth values of Python. This keys are results of comparision operations or logical(Boolean) operations in 
                python.
                    For Example:
                       
                       1 == 1
                       True
                       
                       5>3
                       True
                       
                       10<=1
                       False
                       
                       3>7
                       False
                       
                       True or False
                       True
                       
                       True and False
                       False
                       
               True and False in python is same as 1 and 0 this can be followed example
                       
                       True == 1
                       True
                       
                       True == 0
                       False
                       
                       False == 1
                       False
                       
                       False == 0
                       True
                       
                       True + True 
                       2
                       
                       True + False
                       1
                       
                       False + True
                       1
                       
                       False + FAlse
                       0
                
                       
            NONE :
                None is a Constant in python that represents the absence of a value or a null value.
                It is an object of its own datatype, the NoneType. We cannot create multiple None objects but can assign it to variables.                   These variables will be equal to one another.

                We must take special care that None does not imply False, 0 or any empty list, dictionary, string etc. For example:
                
                None == 0
                
                None == 1
                
                None == False
                
                Output :
                False
                False
                False
                
                x = none
                y = none
                x == y
                
     IDENTIFIRES(NAMES):
        These Names are the Unique name that assign and used to identify a variable, function, class or and object. It helps differentiating
        one entity from another.

        Rules For Writing Identifiers

            1.Identifiers can be a combination of letter in lowercase(a to z) or uppercase(A - Z) or digits(0-9) or an undersscore(_).
                Example:
                    Names like 
                    myClass, var_1 and print_this_to_screen.

            2.Keywords cannot be used as identifiers name.
            3.Python is case sensitive.
            4.We cannot use special symbols like !, @, #, $, % etc.in our identifier.
            5.1st charchter can be (_)underscore but not be a digit
            6.idenifier can be any lenght.               
                
        LITERALS: Constant used in python. Literals are a data Given in a variable called constant. There are four literals they are
            String Literals
            Numeric Literals
            Boolean Literals
            Special Literals
            
        STRING LITERALS: 
            
            Enclosing a text in the quotes.
            both single and double quotes can be used.
                
                Example :
                # String Literals
                name = "Victory"
                name = 'Victory'
                
                multine = '''this is example for 
                multiline
                block'''
                print(multine)
                
        NUMERICAL LITERALS:
                
            A Numerical Literal is a character string whose character selected from 0 to 9 
            It consist of sign character, it can be +ve and -ve.
            if the literal contains low decimal point it an integer
            If too long and if we add "l" or "L" at end of the number so its a long Number
            If literal contain decimal point is cntian float
            
            
            In Python, value of an integer is not restricted by the number of bits and can explain to the limit of the available memory
            
           No special arrangement is required for stroing large numbers 
          
        Boolean Literals:
            These Literals can have only two values they are
            True
            False
            
            True and False are also keywords so we cannot use as identifiers
        
        Special Literals:
             python has one special literal : None
             used to specify to the field that is not created

    OPERATORS:
          Operators have a specific task to perform. Operators are furtuher seegricated into 7 
          
          Arthmetic Operator
          Assignment Operator
          Comparison Operator
          Logical Operator
          Bitwise Operator
          Identity Operator
          Membership Operator
          
          
          ARTHMETIC OPERATOR:
              Arthmetic operators are used to perform arthmetic calculation. Takes two operand to preform operations on them.
                  
                  Operators:
                  +, -,  *, /, %
                  
                  Example:
                  1+2
                  
                  1-2
                  
                  2%1
                  
          ASSIGNMENT OPERATOR:
              Assignment operator is used to assign a value to a variable.
                  Operators:
                  =, +=, -=, *=
                  
                  Example:
                  
                    var = 10
                    var+=10 # var= var+10
                    print(var)
                    var -= 10
                    print(var)
                    var *= 10
                    print(var)
                    var == 10
                    print(var) 
        
         COMPARISON OPERATOR:
             Comparison operator is used to compare two values and it returns true or false as output
             Operators:
             <, >, <=, >=, !=
             
             Example:
             a = 10
             b = 10
             a>b
             
                 
         LOGICAL OPERATOR:
             Logical Operator is used to performs logical operation and returns true or false as output.
             
             Operators:
             and, or , not
             
             Example:
             a =10<10 and 2>-1 # this summerized as false and true so the o/p will 

             print(a)#because the o/p will dived ad true true----true, true, flse, ---- false,
             #false true --------false, false false ----------true
             o /p:false
            
         BITWISE OPERATOR:
             Bitwise Operator is usedto perform bitwise calculation
             Operators:
             &(and), |(or), <<(left shift), >>(right Shfit), ~(not)
             
             Example:
             7 | 5
             converting into binary form and calculated
             the binary form of 7
             111
             the binary form of 5
             101
             or operator will add the binarycodes
             
             111
             101
             ---
             111---- which is 7
             and operaator
             7&5
             111
             101
             ----
             101------which is 5
             
             ~ which is not operator
             7 - 0111
             ~7 = -1000 (0 will convert into 1 and will convert into 0)
                = -8   
                
             >> operator
             10 >> 2 
             10 : 1010
                  0010 output is 2 (here the 2 bits will remove from the right so the output is 2)  
                  
              << operator
              10 << 2
              10 : 1010
                   101000 output is 40 (here the 2 bits are added in the left so the output is 40)
                
         Identity Operator:
             Identity Operator is used to test if the two opernds share an Identity
             
             operators :
             is, is not.
             
             Examples:
             x is 10
             o/p: true
             
             x is not 10
             o/p: false
             
             
         Membership Operators:    
              it is used to test whether a value is a member of a sequence
              
              Operators
              
              in, not in 
              
              Examples:
              pets = ['dog','cat','wolf]
              'lion' in pets
              
              False
              'wolf' in pets
              true
              
              
              
                 
          
            
            
           
             
             
            
            
            
            
            
               
                
            
            
                
            
        
                
        
    